# name: test/sql/cudasp.test
# description: test cudasp extension
# group: [sql]

# Require statement will ensure this test is run with this extension loaded
require cudasp

# Test with gECC correctness test values (test case 0) + BIP-352 Silent Payment pipeline
# Scalar s[0] = 0x0278927476e92caa3912937a7f003e45c741ddc47d80d70ae8f35c0c7f3c78fd
# Point x[0]  = 0xef8ef523cd9e1a96dc497886b69cfc28474207c5679252541288869af65ee7f9
# Point y[0]  = 0xf59a57a32f25c0b0963dc44e5a268c1e258a118cfaecda3dadd2394b3e4bacc8
# BIP-352 Pipeline:
#   1. shared_secret = point * scalar
#   2. serialized = compressed_sec1(shared_secret) || 0x00000000
#   3. hash = tagged_hash("BIP0352/SharedSecret", serialized)
#   4. output_point = hash Ã— G
#   5. final_point = output_point + spend_public_key (using G as spend_public_key for test)
#   6. Expected result: upper 64 bits of final_point.x = 1714273258699162470
statement ok
CREATE TABLE test_data(
    txid BLOB,
    height INTEGER,
    tweak_key BLOB,
    outputs BIGINT[]
);

statement ok
INSERT INTO test_data VALUES
    (BLOB '\x00\x01\x02\x03', 100, BLOB '\xf9\xe7\x5e\xf6\x9a\x86\x88\x12\x54\x52\x92\x67\xc5\x07\x42\x47\x28\xfc\x9c\xb6\x86\x78\x49\xdc\x96\x1a\x9e\xcd\x23\xf5\x8e\xef\xc8\xac\x4b\x3e\x4b\x39\xd2\xad\x3d\xda\xec\xfa\x8c\x11\x8a\x25\x1e\x8c\x26\x5a\x4e\xc4\x3d\x96\xb0\xc0\x25\x2f\xa3\x57\x9a\xf5', [1714273258699162470, 67890]);

# BIP-352 test vector
# scan_private_key: 0f694e068028a717f8af6b9411f9a133dd3565258714cc226594b34db90c1f2c
# spend_public_key: 36cf8fcd4d4890ab6c1083aeb5b50c260c20acda7839120e3575836f6d85c95ce0d705e31ff9fdcce67a8f3598871c6dfbe6bcde8a51cb7b48b0f95be0ea94de
# tweak_key: 040096db612390ee6cef521e784c897c446a26cea8e28819962e5316c253c24a501e53f71071162afab559954064f0ccb7a6779c23b305597b6335829cc1f5b7
# expected_output: 4512552348537027144
statement ok
INSERT INTO test_data VALUES
    (BLOB '\x00\x01\x02\x04', 200, BLOB '\x04\x00\x96\xdb\x61\x23\x90\xee\x6c\xef\x52\x1e\x78\x4c\x89\x7c\x44\x6a\x26\xce\xa8\xe2\x88\x19\x96\x2e\x53\x16\xc2\x53\xc2\x4a\x50\x1e\x53\xf7\x10\x71\x16\x2a\xfa\xb5\x59\x95\x40\x64\xf0\xcc\xb7\xa6\x77\x9c\x23\xb3\x05\x59\x7b\x63\x35\x82\x9c\xc1\xf5\xb7', [4512552348537027144, 99999]);

# Should return only the matching row (first one)
query I
SELECT COUNT(*) FROM cudasp_scan((SELECT txid, height, tweak_key, outputs FROM test_data), BLOB '\xfd\x78\x3c\x7f\x0c\x5c\xf3\xe8\x0a\xd7\x80\x7d\xc4\xdd\x41\xc7\x45\x3e\x00\x7f\x7a\x93\x12\x39\xaa\x2c\xe9\x76\x74\x92\x78\x02', BLOB '\x98\x17\xf8\x16\x5b\x81\xf2\x59\xd9\x28\xce\x2d\xdb\xfc\x9b\x02\x07\x0b\x87\xce\x95\x62\xa0\x55\xac\xbb\xdc\xf9\x7e\x66\xbe\x79\xb8\xd4\x10\xfb\x8f\xd0\x47\x9c\x19\x54\x85\xa6\x48\xb4\x17\xfd\xa8\x08\x11\x0e\xfc\xfb\xa4\x5d\x65\xc4\xa3\x26\x77\xda\x3a\x48', CAST([] AS BLOB[]));
----
1

# Verify it's the correct row
query I
SELECT height FROM cudasp_scan((SELECT txid, height, tweak_key, outputs FROM test_data), BLOB '\xfd\x78\x3c\x7f\x0c\x5c\xf3\xe8\x0a\xd7\x80\x7d\xc4\xdd\x41\xc7\x45\x3e\x00\x7f\x7a\x93\x12\x39\xaa\x2c\xe9\x76\x74\x92\x78\x02', BLOB '\x98\x17\xf8\x16\x5b\x81\xf2\x59\xd9\x28\xce\x2d\xdb\xfc\x9b\x02\x07\x0b\x87\xce\x95\x62\xa0\x55\xac\xbb\xdc\xf9\x7e\x66\xbe\x79\xb8\xd4\x10\xfb\x8f\xd0\x47\x9c\x19\x54\x85\xa6\x48\xb4\x17\xfd\xa8\x08\x11\x0e\xfc\xfb\xa4\x5d\x65\xc4\xa3\x26\x77\xda\x3a\x48', CAST([] AS BLOB[]));
----
100

# Test BIP-352 test vector - should return only the matching row (second one)
query I
SELECT COUNT(*) FROM cudasp_scan((SELECT txid, height, tweak_key, outputs FROM test_data), BLOB '\x2c\x1f\x0c\xb9\x4d\xb3\x94\x65\x22\xcc\x14\x87\x25\x65\x35\xdd\x33\xa1\xf9\x11\x94\x6b\xaf\xf8\x17\xa7\x28\x80\x06\x4e\x69\x0f', BLOB '\x36\xcf\x8f\xcd\x4d\x48\x90\xab\x6c\x10\x83\xae\xb5\xb5\x0c\x26\x0c\x20\xac\xda\x78\x39\x12\x0e\x35\x75\x83\x6f\x6d\x85\xc9\x5c\xe0\xd7\x05\xe3\x1f\xf9\xfd\xcc\xe6\x7a\x8f\x35\x98\x87\x1c\x6d\xfb\xe6\xbc\xde\x8a\x51\xcb\x7b\x48\xb0\xf9\x5b\xe0\xea\x94\xde', CAST([] AS BLOB[]));
----
1

# Verify it's the correct BIP-352 test vector row
query I
SELECT height FROM cudasp_scan((SELECT txid, height, tweak_key, outputs FROM test_data), BLOB '\x2c\x1f\x0c\xb9\x4d\xb3\x94\x65\x22\xcc\x14\x87\x25\x65\x35\xdd\x33\xa1\xf9\x11\x94\x6b\xaf\xf8\x17\xa7\x28\x80\x06\x4e\x69\x0f', BLOB '\x36\xcf\x8f\xcd\x4d\x48\x90\xab\x6c\x10\x83\xae\xb5\xb5\x0c\x26\x0c\x20\xac\xda\x78\x39\x12\x0e\x35\x75\x83\x6f\x6d\x85\xc9\x5c\xe0\xd7\x05\xe3\x1f\xf9\xfd\xcc\xe6\x7a\x8f\x35\x98\x87\x1c\x6d\xfb\xe6\xbc\xde\x8a\x51\xcb\x7b\x48\xb0\xf9\x5b\xe0\xea\x94\xde', CAST([] AS BLOB[]));
----
200

# Test label checking - label_key matches spend_public_key
# scan_private_key: 11b7a82e06ca2648d5fded2366478078ec4fc9dc1d8ff487518226f229d768fd
# spend_public_key: 03ecd43b9fdad484ff57278b21878b844276ce390622d03dd0cfb4288b7e02a6f5
# tweak_key: 0314bec14463d6c0181083d607fecfba67bb83f95915f6f247975ec566d5642ee8
# label_key: 03ecd43b9fdad484ff57278b21878b844276ce390622d03dd0cfb4288b7e02a6f5 (same as spend_public_key)
# output: -4740445252767345406
statement ok
INSERT INTO test_data VALUES
    (BLOB '\x00\x01\x02\x05', 300, BLOB '\xe8\x2e\x64\xd5\x66\xc5\x5e\x97\x47\xf2\xf6\x15\x59\xf9\x83\xbb\x67\xba\xcf\xfe\x07\xd6\x83\x10\x18\xc0\xd6\x63\x44\xc1\xbe\x14\xc3\x80\x32\xa4\x8f\x5b\x3c\x56\xb5\xb6\x28\x6a\x06\xc0\x27\x08\x46\xb7\xb8\x52\xcd\x31\x8d\x9a\x13\x71\x73\xa5\xb4\x1c\x2f\x84', [-4740445252767345406]);

# Should match using label_key
query I
SELECT COUNT(*) FROM cudasp_scan((SELECT txid, height, tweak_key, outputs FROM test_data WHERE height = 300), BLOB '\xfd\x68\xd7\x29\xf2\x26\x82\x51\x87\xf4\x8f\x1d\xdc\xc9\x4f\xec\x78\x80\x47\x66\x23\xed\xfd\xd5\x48\x26\xca\x06\x2e\xa8\xb7\x11', BLOB '\xf5\xa6\x02\x7e\x8b\x28\xb4\xcf\xd0\x3d\xd0\x22\x06\x39\xce\x76\x42\x84\x8b\x87\x21\x8b\x27\x57\xff\x84\xd4\xda\x9f\x3b\xd4\xec\xa5\x1c\xdf\xf2\x8a\x7d\x87\x5a\xf8\x1e\xa5\x0e\xa2\x1d\x55\xcb\x00\x2e\xa4\xed\x5a\x90\x2e\x37\xc0\x4a\x61\x9f\xc8\xef\xea\x3f', [BLOB '\xf5\xa6\x02\x7e\x8b\x28\xb4\xcf\xd0\x3d\xd0\x22\x06\x39\xce\x76\x42\x84\x8b\x87\x21\x8b\x27\x57\xff\x84\xd4\xda\x9f\x3b\xd4\xec\xa5\x1c\xdf\xf2\x8a\x7d\x87\x5a\xf8\x1e\xa5\x0e\xa2\x1d\x55\xcb\x00\x2e\xa4\xed\x5a\x90\x2e\x37\xc0\x4a\x61\x9f\xc8\xef\xea\x3f']);
----
1

# Verify it's the correct label test row
query I
SELECT height FROM cudasp_scan((SELECT txid, height, tweak_key, outputs FROM test_data WHERE height = 300), BLOB '\xfd\x68\xd7\x29\xf2\x26\x82\x51\x87\xf4\x8f\x1d\xdc\xc9\x4f\xec\x78\x80\x47\x66\x23\xed\xfd\xd5\x48\x26\xca\x06\x2e\xa8\xb7\x11', BLOB '\xf5\xa6\x02\x7e\x8b\x28\xb4\xcf\xd0\x3d\xd0\x22\x06\x39\xce\x76\x42\x84\x8b\x87\x21\x8b\x27\x57\xff\x84\xd4\xda\x9f\x3b\xd4\xec\xa5\x1c\xdf\xf2\x8a\x7d\x87\x5a\xf8\x1e\xa5\x0e\xa2\x1d\x55\xcb\x00\x2e\xa4\xed\x5a\x90\x2e\x37\xc0\x4a\x61\x9f\xc8\xef\xea\x3f', [BLOB '\xf5\xa6\x02\x7e\x8b\x28\xb4\xcf\xd0\x3d\xd0\x22\x06\x39\xce\x76\x42\x84\x8b\x87\x21\x8b\x27\x57\xff\x84\xd4\xda\x9f\x3b\xd4\xec\xa5\x1c\xdf\xf2\x8a\x7d\x87\x5a\xf8\x1e\xa5\x0e\xa2\x1d\x55\xcb\x00\x2e\xa4\xed\x5a\x90\x2e\x37\xc0\x4a\x61\x9f\xc8\xef\xea\x3f']);
----
300

# Should NOT match without the label_key
query I
SELECT COUNT(*) FROM cudasp_scan((SELECT txid, height, tweak_key, outputs FROM test_data WHERE height = 300), BLOB '\xfd\x68\xd7\x29\xf2\x26\x82\x51\x87\xf4\x8f\x1d\xdc\xc9\x4f\xec\x78\x80\x47\x66\x23\xed\xfd\xd5\x48\x26\xca\x06\x2e\xa8\xb7\x11', BLOB '\xf5\xa6\x02\x7e\x8b\x28\xb4\xcf\xd0\x3d\xd0\x22\x06\x39\xce\x76\x42\x84\x8b\x87\x21\x8b\x27\x57\xff\x84\xd4\xda\x9f\x3b\xd4\xec\xa5\x1c\xdf\xf2\x8a\x7d\x87\x5a\xf8\x1e\xa5\x0e\xa2\x1d\x55\xcb\x00\x2e\xa4\xed\x5a\x90\x2e\x37\xc0\x4a\x61\x9f\xc8\xef\xea\x3f', CAST([] AS BLOB[]));
----
0

# Test with batching - use matching tweak key for all 20K rows
statement ok
CREATE TABLE large_test AS
SELECT
    BLOB '\x00\x01\x02\x03' AS txid,
    100 AS height,
    BLOB '\xf9\xe7\x5e\xf6\x9a\x86\x88\x12\x54\x52\x92\x67\xc5\x07\x42\x47\x28\xfc\x9c\xb6\x86\x78\x49\xdc\x96\x1a\x9e\xcd\x23\xf5\x8e\xef\xc8\xac\x4b\x3e\x4b\x39\xd2\xad\x3d\xda\xec\xfa\x8c\x11\x8a\x25\x1e\x8c\x26\x5a\x4e\xc4\x3d\x96\xb0\xc0\x25\x2f\xa3\x57\x9a\xf5' AS tweak_key,
    [1714273258699162470::BIGINT, 67890::BIGINT] AS outputs
FROM range(20000);

query I
SELECT COUNT(*) FROM cudasp_scan((SELECT txid, height, tweak_key, outputs FROM large_test), BLOB '\xfd\x78\x3c\x7f\x0c\x5c\xf3\xe8\x0a\xd7\x80\x7d\xc4\xdd\x41\xc7\x45\x3e\x00\x7f\x7a\x93\x12\x39\xaa\x2c\xe9\x76\x74\x92\x78\x02', BLOB '\x98\x17\xf8\x16\x5b\x81\xf2\x59\xd9\x28\xce\x2d\xdb\xfc\x9b\x02\x07\x0b\x87\xce\x95\x62\xa0\x55\xac\xbb\xdc\xf9\x7e\x66\xbe\x79\xb8\xd4\x10\xfb\x8f\xd0\x47\x9c\x19\x54\x85\xa6\x48\xb4\x17\xfd\xa8\x08\x11\x0e\xfc\xfb\xa4\x5d\x65\xc4\xa3\x26\x77\xda\x3a\x48', CAST([] AS BLOB[]));
----
20000

# Test with very large dataset for parallel execution (200K rows)
statement ok
CREATE TABLE very_large_test AS
SELECT
    BLOB '\x00\x01\x02\x03' AS txid,
    100 AS height,
    BLOB '\xf9\xe7\x5e\xf6\x9a\x86\x88\x12\x54\x52\x92\x67\xc5\x07\x42\x47\x28\xfc\x9c\xb6\x86\x78\x49\xdc\x96\x1a\x9e\xcd\x23\xf5\x8e\xef\xc8\xac\x4b\x3e\x4b\x39\xd2\xad\x3d\xda\xec\xfa\x8c\x11\x8a\x25\x1e\x8c\x26\x5a\x4e\xc4\x3d\x96\xb0\xc0\x25\x2f\xa3\x57\x9a\xf5' AS tweak_key,
    [1714273258699162470::BIGINT, 67890::BIGINT] AS outputs
FROM range(200000);

query I
SELECT COUNT(*) FROM cudasp_scan((SELECT txid, height, tweak_key, outputs FROM very_large_test), BLOB '\xfd\x78\x3c\x7f\x0c\x5c\xf3\xe8\x0a\xd7\x80\x7d\xc4\xdd\x41\xc7\x45\x3e\x00\x7f\x7a\x93\x12\x39\xaa\x2c\xe9\x76\x74\x92\x78\x02', BLOB '\x98\x17\xf8\x16\x5b\x81\xf2\x59\xd9\x28\xce\x2d\xdb\xfc\x9b\x02\x07\x0b\x87\xce\x95\x62\xa0\x55\xac\xbb\xdc\xf9\x7e\x66\xbe\x79\xb8\xd4\x10\xfb\x8f\xd0\x47\x9c\x19\x54\x85\xa6\x48\xb4\x17\xfd\xa8\x08\x11\x0e\xfc\xfb\xa4\x5d\x65\xc4\xa3\x26\x77\xda\x3a\x48', CAST([] AS BLOB[]));
----
200000
