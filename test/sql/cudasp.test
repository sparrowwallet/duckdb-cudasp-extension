# name: test/sql/cudasp.test
# description: test cudasp extension
# group: [sql]

# Require statement will ensure this test is run with this extension loaded
require cudasp

# Test with gECC correctness test values (test case 0) + BIP-352 Silent Payment pipeline
# Scalar s[0] = 0x0278927476e92caa3912937a7f003e45c741ddc47d80d70ae8f35c0c7f3c78fd
# Point x[0]  = 0xef8ef523cd9e1a96dc497886b69cfc28474207c5679252541288869af65ee7f9
# Point y[0]  = 0xf59a57a32f25c0b0963dc44e5a268c1e258a118cfaecda3dadd2394b3e4bacc8
# BIP-352 Pipeline:
#   1. shared_secret = point * scalar
#   2. serialized = compressed_sec1(shared_secret) || 0x00000000
#   3. hash = tagged_hash("BIP0352/SharedSecret", serialized)
#   4. output_point = hash Ã— G
#   5. Expected result: lower 64 bits of output_point.x = 6284895681754110921
statement ok
CREATE TABLE test_data(
    txid BLOB,
    height INTEGER,
    tweak_key BLOB,
    outputs BIGINT[]
);

statement ok
INSERT INTO test_data VALUES
    (BLOB '\x00\x01\x02\x03', 100, BLOB '\xf9\xe7\x5e\xf6\x9a\x86\x88\x12\x54\x52\x92\x67\xc5\x07\x42\x47\x28\xfc\x9c\xb6\x86\x78\x49\xdc\x96\x1a\x9e\xcd\x23\xf5\x8e\xef\xc8\xac\x4b\x3e\x4b\x39\xd2\xad\x3d\xda\xec\xfa\x8c\x11\x8a\x25\x1e\x8c\x26\x5a\x4e\xc4\x3d\x96\xb0\xc0\x25\x2f\xa3\x57\x9a\xf5', [6284895681754110921, 67890]);

# Should return only the matching row (first one)
query I
SELECT COUNT(*) FROM cudasp_scan((SELECT txid, height, tweak_key, outputs FROM test_data), BLOB '\xfd\x78\x3c\x7f\x0c\x5c\xf3\xe8\x0a\xd7\x80\x7d\xc4\xdd\x41\xc7\x45\x3e\x00\x7f\x7a\x93\x12\x39\xaa\x2c\xe9\x76\x74\x92\x78\x02');
----
1

# Verify it's the correct row
query I
SELECT height FROM cudasp_scan((SELECT txid, height, tweak_key, outputs FROM test_data), BLOB '\xfd\x78\x3c\x7f\x0c\x5c\xf3\xe8\x0a\xd7\x80\x7d\xc4\xdd\x41\xc7\x45\x3e\x00\x7f\x7a\x93\x12\x39\xaa\x2c\xe9\x76\x74\x92\x78\x02');
----
100

# Test with batching - use matching tweak key for all 20K rows
statement ok
CREATE TABLE large_test AS
SELECT
    BLOB '\x00\x01\x02\x03' AS txid,
    100 AS height,
    BLOB '\xf9\xe7\x5e\xf6\x9a\x86\x88\x12\x54\x52\x92\x67\xc5\x07\x42\x47\x28\xfc\x9c\xb6\x86\x78\x49\xdc\x96\x1a\x9e\xcd\x23\xf5\x8e\xef\xc8\xac\x4b\x3e\x4b\x39\xd2\xad\x3d\xda\xec\xfa\x8c\x11\x8a\x25\x1e\x8c\x26\x5a\x4e\xc4\x3d\x96\xb0\xc0\x25\x2f\xa3\x57\x9a\xf5' AS tweak_key,
    [6284895681754110921::BIGINT, 67890::BIGINT] AS outputs
FROM range(20000);

query I
SELECT COUNT(*) FROM cudasp_scan((SELECT txid, height, tweak_key, outputs FROM large_test), BLOB '\xfd\x78\x3c\x7f\x0c\x5c\xf3\xe8\x0a\xd7\x80\x7d\xc4\xdd\x41\xc7\x45\x3e\x00\x7f\x7a\x93\x12\x39\xaa\x2c\xe9\x76\x74\x92\x78\x02');
----
20000

# Test with very large dataset for parallel execution (200K rows)
statement ok
CREATE TABLE very_large_test AS
SELECT
    BLOB '\x00\x01\x02\x03' AS txid,
    100 AS height,
    BLOB '\xf9\xe7\x5e\xf6\x9a\x86\x88\x12\x54\x52\x92\x67\xc5\x07\x42\x47\x28\xfc\x9c\xb6\x86\x78\x49\xdc\x96\x1a\x9e\xcd\x23\xf5\x8e\xef\xc8\xac\x4b\x3e\x4b\x39\xd2\xad\x3d\xda\xec\xfa\x8c\x11\x8a\x25\x1e\x8c\x26\x5a\x4e\xc4\x3d\x96\xb0\xc0\x25\x2f\xa3\x57\x9a\xf5' AS tweak_key,
    [6284895681754110921::BIGINT, 67890::BIGINT] AS outputs
FROM range(200000);

query I
SELECT COUNT(*) FROM cudasp_scan((SELECT txid, height, tweak_key, outputs FROM very_large_test), BLOB '\xfd\x78\x3c\x7f\x0c\x5c\xf3\xe8\x0a\xd7\x80\x7d\xc4\xdd\x41\xc7\x45\x3e\x00\x7f\x7a\x93\x12\x39\xaa\x2c\xe9\x76\x74\x92\x78\x02');
----
200000
